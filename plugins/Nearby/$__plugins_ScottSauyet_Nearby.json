{"tiddlers":{"$:/plugins/ScottSauyet/Nearby/config.json":{"text":"{\n    \"linked\": [8, 0],\n    \"tagged\": [5, 0],\n    \"sharedTag\": [3, 1],\n    \"hasField\": [1, 1]\n}","type":"application/json","created":"20230110013951553","modified":"20230110022331512","tags":"","title":"$:/plugins/ScottSauyet/Nearby/config.json"},"$:/plugins/ScottSauyet/Nearby/credits":{"title":"$:/plugins/ScottSauyet/Nearby/credits","created":"20221210165246217","modified":"20230105034808342","tags":"","type":"text/vnd.tiddlywiki","text":"This was built with help from various people, in threads on [[talk.tiddlywiki|https://talk.tiddlywiki.org/]], including \n[[#5638|https://talk.tiddlywiki.org/t/5638]] and [[#5700|https://talk.tiddlywiki.org/t/5700]].\n\nI apologize if I've forgotten someone, but these folks gave of their time and knowledge, and I offer my sincere thanks:\n\n* [[Cyrill Andreani|https://talk.tiddlywiki.org/u/Cyrill_Andreani]]\n* [[Nick Bell|https://talk.tiddlywiki.org/u/NickB]]\n* [[Yaisog Bonegnasher|https://talk.tiddlywiki.org/u/Yaisog]]\n* [[CodaCoder|https://talk.tiddlywiki.org/u/CodaCoder]]\n* [[Anthony Muscio|https://talk.tiddlywiki.org/u/TW_Tones]]\n* [[Mohammad Rahmani|https://talk.tiddlywiki.org/u/Mohammad]]\n* [[TiddlyTweeter|https://talk.tiddlywiki.org/u/TiddlyTweeter]]\n* [[Mat von TWaddle|https://talk.tiddlywiki.org/u/twMat]]\n\n\nAnd of course, I can't forget to thank [[Jeremy Ruston|https://talk.tiddlywiki.org/u/jeremyruston]] whose little toy wiki has become so powerful and so beloved.\n"},"$:/plugins/ScottSauyet/Nearby/license":{"title":"$:/plugins/ScottSauyet/Nearby/license","created":"20221204003920609","modified":"20221204004001083","tags":"","type":"text/vnd.tiddlywiki","text":"The MIT License (MIT)\n\nCopyright (c) 2022 Scott Sauyet\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."},"$:/plugins/ScottSauyet/Nearby/neighbors.js":{"title":"$:/plugins/ScottSauyet/Nearby/neighbors.js","text":"/*\\\ntitle: $:/core/modules/filters/neighbors.js\ntype: application/javascript\nmodule-type: filteroperator\n\nList the `n` nearest neighbors for a tiddler\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\n\nconst intersect = (as, bs) => \n  as .filter (a => bs .includes (a))\n\n\nconst fields = (tiddler) => Object .fromEntries ( // TODO: Very roundabout.  Surely something better available\n  Object .entries (tiddler .getFieldStrings()) \n  .filter (([k]) => ! ['created', 'modified', 'revision', 'tags', 'text', 'title', 'type', 'list'] .includes (k))\n  .map (([k, v]) => [k, tiddler.getFieldList(k)])\n)\n\nconst defaultPoints = {\n    tagged: 8,\n    linked: 5,\n    sharedTag: 3,\n    hasField: 1\n}\n\nconst sum = (ns) => ns .reduce ((t, n) => t + n, 0)\n\nconst score = (parts, points) => sum(\n  Object.entries(parts).map(([k, v]) => {\n    const ps = points[k] || [0]\n    const dflt = ps .at (-1) || 0\n    return sum(Array.from({length: v}, (_, i) => ps [i] || dflt))\n  })\n)\n\nconst distance = function (wiki, first, second) {\n    // TODO (once real config in place): add error handling\n    console .log ({conf: wiki.getTiddler('$:/plugins/ScottSauyet/Nearby/config.json')});\n    const points = JSON.parse(wiki.getTiddler('$:/plugins/ScottSauyet/Nearby/config.json').fields.text)\n        || defaultPoints\n    const a = wiki.getTiddler (first) ?? {fields: {}}\n    const b = wiki.getTiddler (second) ?? {fields: {}}\n    const linked = wiki.getTiddlerLinks(first).includes(second) || wiki.getTiddlerLinks(second).includes (first) ? 1 : 0\n    const tagsA = a.getFieldList('tags')\n    const tagsB = b.getFieldList('tags')\n    const tagged = tagsA.includes (second) || tagsB.includes (first) ? 1 : 0\n    const sharedTag = intersect (tagsA, tagsB) . length\n    const fieldsA = Object.values(fields (a)).flat()\n    const fieldsB = Object.values(fields (b)).flat()\n    const hasField = fieldsA.filter(x => x == second).length +\n                     fieldsB.filter(y => y == first).length\n    const rawScore = score ({linked, tagged, sharedTag, hasField}, points)\n    return first == second ? 0 : rawScore == 0 ? Infinity : ~~(1000 / rawScore)\n\n}\n\nexports.neighbors = function(source,operator,options) {\n\tconst titles = options.wiki.getTiddlers() .filter (t => ! t.startsWith ('$:/'))\n\tlet results = []\n\tsource(function(tiddler,title) { // todo: can this operate on more than one?  Here it's the last input tiddler\n\t\tresults = titles \n\t\t  .map (t => [t, distance(options.wiki, title, t)]) \n\t\t  .filter (([_, v]) => v !== 0 && v !== Infinity)\n\t\t  .sort (([, a], [, b]) => a - b) \n\t\t  .slice (0, operator .operand ? Number (operator .operand) : Infinity)\n\t\t  .map (([t]) => t\n\t\t)\n\t});\n\treturn results\n};\n\n})();","type":"application/javascript","module-type":"filteroperator","created":"20230103011100547","modified":"20230110021401257","tags":""},"$:/plugins/ScottSauyet/Nearby/readme":{"title":"$:/plugins/ScottSauyet/Nearby/readme","created":"20221204003433603","modified":"20230105030547851","tags":"","type":"text/vnd.tiddlywiki","text":"Nearest Neighbors is a simple plug-in to add a footer to tiddlers listing other tiddlers that are close to it using a metric involving relations between links, tags, and fields.\n\nThis is in a very early, proof-of-concept stage.\n\n!! Source code\n\nYou can find this in a [[GitHub repository|https://github.com/CrossEye/TW5-Nearby]].\n\n!! Usage\n\nInstall by dragging the following link to your wiki and then choosing \"install\":\n\n@@padding-left:2em;\n\n[[$:/plugins/ScottSauyet/Nearby]]\n\n@@\n"},"$:/plugins/ScottSauyet/Nearby/Stylesheet":{"title":"$:/plugins/ScottSauyet/Nearby/Stylesheet","created":"20221121184648238","modified":"20230104044415973","tags":"$:/tags/Stylesheet","type":"text/vnd.tiddlywiki","text":"\\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline html\n\n.nearby-neighbor {\n  width: 100%; \n  margin-top: 2em; \n  border: none;\n  border-top: 1px solid <<colour muted-foreground>>; \n}\n\n.nearbyItem {\n\tfont-size: 0.8rem;\n\tborder: 1px solid <<colour muted-foreground>>;\n\tpadding: .125rem .5rem;\n\tmargin: .25rem;\n\tborder-radius: .75rem;\n\tbackground-color: <<colour background>>;\n\tcolor: <<colour foreground>>;\n\ttext-decoration: none;\n\tdisplay: inline-block;\n}\n"},"$:/plugins/ScottSauyet/Nearby/todo":{"title":"$:/plugins/ScottSauyet/Nearby/todo","created":"20230103030759429","modified":"20230105031741488","tags":"","type":"text/vnd.tiddlywiki","text":"''Note'': This is a very early proof of concept.  There is much to do before even deciding whether it's worth pursuing, and then more after that to make this generally useful.\n\n!!! Important open questions\n\n* This is only the first pass at neighbors.  The idea is to use the distances calculated here as the initial edge weights to use in [[Dijkstra's Algorithm|https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm]].  But that would almost certainly involve caching results.  It's unlikely that we'd be able to efficiently run this on all the tiddlers of a large wiki through the <code>O(n<sup>2</sup>)</code> pairs.  But that means figuring out caching mechanisms.  This is probably harder than many caching features, as we have to cache the distances of //pairs// of nodes.  We would then still need to run Dijkstra on the result, for every change, and that may be ugly.  Alternately, and quite reasonably for my initial use-case, is to note run this on change, but only at start-up/refresh.  But that seems counter to most people's usage of TW.\n\n* This plain list of closest neighbors, currently set at the top ten, is only for the proof-of-concept.  It would be great to have some visualization of the neighborhood, using something like a force-directed graph, with each node being the tiddler title/caption as a link to the tiddler.    Or perhaps simpler, we could have each title associated with a simple distance visualization.  To do this, I would need to get back either a list of pairs (name/value) or a pair of lists (names/values).  While I would definitely prefer the former, I get the impression that TW handles the latter much more gracefully.\n\n* It's not clear if the code is reasonable.  I'm too new at TW to be at all certain.  There are some things that clearly need to be done:\n\n** It uses a fairly different coding style than the TW core code.  I don't know if there is a norm to write plug-ins in the same style as the core, but I need to at least consider it.\n\n** It's not at all clear to me if there are significant inefficiencies \n\n** It's not clear if there is a better technique than a JS macro.\n\n\n!!! Things I think I know how to do, but will wait on for now:\n\n* <del>We probably don't want to show the footer if there are no neighbors, and probably want to skip it on system tiddlers.</del>''Done'':fixed in version `0.0.2`.\n\n* <del>There should be a way to turn this off per tiddler, perhaps a `hide-nearby-footer` field.  Alternately, perhaps there's some configuration to opt-in, but it's not clear what that would be.</del>''Done'': fixed in version `0.0.3`.\n\n* This initial calculation of immediate neighbors and their distances is based on hunches, not science.  This implies that the weightings should be configurable.  Moreover, some of them might not be based strictly on booleans.  (Currently, points are calculated using an object like ` {tagged: 8, linked: 5, sharedTag: 3, hasField: 1}`  For instance, for shared tags, we might choose to add, say, three points for the first tag two tiddlers have in common, and then one for each additional tag.  This is not hard to write, although an intuitive configuration mechanism for this might be tricky."},"$:/plugins/ScottSauyet/Nearby/version":{"title":"$:/plugins/ScottSauyet/Nearby/version","created":"20221206023816502","modified":"20230105031433851","tags":"","type":"text/vnd.tiddlywiki","text":"; ''[[0.0.3|https://crosseye.github.io/TW5-Nearest/0.0.3/]]''\n:\n* Add the ability to avoid the footer on a tiddler by adding tag`$:/tags/SkipNearby`\n* Minor cleanups to README wording\n\n; ''[[0.0.2|https://crosseye.github.io/TW5-Nearest/0.0.2/]]''\n:\n* Remove footer from system tiddlers, from missing tiddlers, and from those with no neighbors\n* Make the links into something more like tag pills\n\n; ''[[0.0.1|https://crosseye.github.io/TW5-Nearest/0.0.1/]]''\n:\n* Initial proof of concept\n"},"$:/plugins/ScottSauyet/Nearby/ViewTemplate":{"title":"$:/plugins/ScottSauyet/Nearby/ViewTemplate","created":"20221121163308395","modified":"20230105031447935","tags":"$:/tags/ViewTemplate","type":"text/vnd.tiddlywiki","text":"<$list filter=\"[all[current]!tag[$:/tags/SkipNearby]]\" variable=\"_\">\n<$list filter=\"[all[current]is[tiddler]!is[system]]\">\n<$list filter=\"[all[current]neighbors[1]]\" variable=\"_\">\n\t<div class=\"nearby-neighbors\">\n\t<hr/>\n\t<details>\n\t<summary>Nearby</summary><$list filter=[all[current]neighbors[10]] variable=\"currentRecord\">\n\t\t<$link to=<<currentRecord>> class=\"nearbyItem\" />\n\t</$list>\n\t</details>\n\t</div>\n</$list>\n</$list>\n</$list>"}}}